The ZRE Discovery protocol (ZRE-DISC) defines a UDP-based discovery protocol for peers on a single network. ZRE-DISC is a layer of the [http://rfc.zeromq.org/spec:20/ZRE ZRE protocol].

* Name: rfc.zeromq.org/spec:22/ZRE-DISC
* Editor: Pieter Hintjens <ph@imatix.com>
* State: draft

++ License

Copyright (c) 2009-2013 iMatix Corporation

This Specification is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.

This Specification is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program; if not, see <http://www.gnu.org/licenses>.

++ Change Process

This Specification is a free and open standard[((bibcite fandos))] and is governed by the Digital Standards Organization's Consensus-Oriented Specification System (COSS)[((bibcite coss))].

++ Language

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119[((bibcite rfc2119))].

++ Goals

The ZRE-DISC protocol provides a way for a set of nodes on a local network to discover each other. Its goals are:

* To work with no centralized services or mediation except those available by default on a network.
* To be robust on poor-quality networks, especially wireless networks.
* To minimize the time taken to detect a new peer's arrival on the network.
* To be neutral with respect to operating system, programming language, and hardware.
* To allow any number of nodes to run in one process, to allow large-scale simulation and testing.

++ Implementation

+++ Node Identification and Life-cycle

A //node// represents a source or a target for messaging. Nodes usually map to applications. A node is identified by a 16-octet universally unique identifier (UUID). ZRE-DISC does not define how a node is created or destroyed but does assume that nodes have a certain durability.

+++ Node Discovery

ZRE-DISC uses IPv4 //UDP broadcast messages// to discover nodes. Such a message is called a //beacon//. This works as follows:

* A node SHALL listen to the ZRE-DISC service which is UDP port 5670 (assigned by IANA).
* Each node SHALL broadcast, at regular intervals, a beacon that identifies itself to any listening nodes on the network.
* When a node receives a beacon from a node that it does not already know about, it SHALL consider this to be a new peer.

+++ Short Beacon Form

The ZRE-DISC //short beacon// consists of one 22-octet UDP message with this format:

[[code]]
       Header               Body
+---+---+---+------+  +------+------+
| Z | R | E | %x01 |  | UUID | port |
+---+---+---+------+  +------+------+
  1   1   1     1        16     2
[[/code]]

Notes for implementors:

* The header SHALL consist of the letters 'Z', 'R', and 'E', followed by the beacon format number, which SHALL be %x01 for short beacons.
* The body SHALL consist of the sender's 16-octet UUID, followed by a two-byte mailbox port number in network order.
* A valid short beacon SHALL: use a recognized header; use a body of the right size; and provide a non-zero mailbox port number.
* A node that receives an invalid short beacon SHALL discard it silently. A node MAY log the sender IP address for the purposes of debugging.
* A node SHALL discard all short beacons that it receives from itself.
* A node MAY discard short beacons if it is not prepared to handle them and requires long beacons.

+++ Long Beacon Form

The ZRE-DISC //long beacon// consists of one 22-octet UDP message with this format:

[[code]]
       Header                                Body
+---+---+---+------+  +------+------+-------------+----------+---------+
| Z | R | E | %x02 |  | UUID | port | socket-type | protocol | address |
+---+---+---+------+  +------+------+-------------+----------+---------+
  1   1   1     1        16     2          1           1          4
[[/code]]

Notes for implementors:

* The header SHALL consist of the letters 'Z', 'R', and 'E', followed by the beacon format number, which SHALL be %x02 for long beacons.
* The body SHALL consist of the sender's 16-octet UUID, followed by a two-byte mailbox port number in network order, followed by a 1-octet socket type, followed by a 1-octet transport, followed by a 4-byte network address.
* The socket type identifies the socket type of the sender endpoint, and SHALL be one of the socket types defined in [http://rfc.zeromq.org/spec:15/ZMTP the ZMTP protocol].
* The transport SHALL be one of %x01 for TCP or %0x02 for PGM.
* The address SHALL specify the network address to connect back to. If these four octets are zero, the sender address of the UDP packet shall be used as the network address.
* A valid long beacon SHALL: use a recognized header; use a body of the right size; and provide non-zero mailbox port number and socket type.
* A node that receives an invalid long beacon SHALL discard it silently. A node MAY log the sender IP address for the purposes of debugging.
* A node SHALL discard all long beacons that it receives from itself.
* A node MAY discard long beacons if it is not prepared to handle them and requires short beacons.

++ Security Aspects

ZRE-DISC does not have any security at this stage.

++ References

[[bibliography]]
: rfc2119 : "Key words for use in RFCs to Indicate Requirement Levels" - [http://tools.ietf.org/html/rfc2119 ietf.org]
: fandos : "Definition of a Free and Open Standard" - [http://www.digistan.org/open-standard:definition digistan.org]
: coss : "Consensus Oriented Specification System" - [http://www.digistan.org/spec:1/COSS digistan.org]
: zmtp : "15/ZMTP - ZeroMQ Message Transport Protocol" - [http://rfc.zeromq.org/spec:15 rfc.zeromq.org]
[[/bibliography]]